{"ast":null,"code":"const login = async credentials => {\n  try {\n    const response = await fetch('http://localhost:8082/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n\n    // Check if the response contains error message\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n\n    // Validate response data structure\n    if (!data.token) {\n      throw new Error('Token missing in response');\n    }\n\n    // Store token even if user object is not present\n    localStorage.setItem('token', data.token);\n\n    // If user data is present, store it\n    if (data.user) {\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setUser(data.user);\n    } else {\n      // Create minimal user object if not provided\n      const minimalUser = {\n        email: credentials.email\n      };\n      localStorage.setItem('user', JSON.stringify(minimalUser));\n      setUser(minimalUser);\n    }\n    setIsAuthenticated(true);\n    navigate('/dashboard');\n    return data;\n  } catch (error) {\n    console.error('Login error details:', error);\n    throw new Error(error.message || 'Login failed. Please try again.');\n  }\n};","map":{"version":3,"names":["login","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","token","localStorage","setItem","user","setUser","minimalUser","email","setIsAuthenticated","navigate","error","console"],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/contexts/AuthContext.js"],"sourcesContent":["const login = async (credentials) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8082/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      // Check if the response contains error message\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Login failed');\r\n      }\r\n\r\n      // Validate response data structure\r\n      if (!data.token) {\r\n        throw new Error('Token missing in response');\r\n      }\r\n\r\n      // Store token even if user object is not present\r\n      localStorage.setItem('token', data.token);\r\n      \r\n      // If user data is present, store it\r\n      if (data.user) {\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n        setUser(data.user);\r\n      } else {\r\n        // Create minimal user object if not provided\r\n        const minimalUser = { email: credentials.email };\r\n        localStorage.setItem('user', JSON.stringify(minimalUser));\r\n        setUser(minimalUser);\r\n      }\r\n\r\n      setIsAuthenticated(true);\r\n      navigate('/dashboard');\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Login error details:', error);\r\n      throw new Error(error.message || 'Login failed. Please try again.');\r\n    }\r\n  };"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAOC,WAAW,IAAK;EACjC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IAClC,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAElC;IACA,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,cAAc,CAAC;IACjD;;IAEA;IACA,IAAI,CAACJ,IAAI,CAACK,KAAK,EAAE;MACf,MAAM,IAAIF,KAAK,CAAC,2BAA2B,CAAC;IAC9C;;IAEA;IACAG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACK,KAAK,CAAC;;IAEzC;IACA,IAAIL,IAAI,CAACQ,IAAI,EAAE;MACbF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAET,IAAI,CAACC,SAAS,CAACC,IAAI,CAACQ,IAAI,CAAC,CAAC;MACvDC,OAAO,CAACT,IAAI,CAACQ,IAAI,CAAC;IACpB,CAAC,MAAM;MACL;MACA,MAAME,WAAW,GAAG;QAAEC,KAAK,EAAEnB,WAAW,CAACmB;MAAM,CAAC;MAChDL,YAAY,CAACC,OAAO,CAAC,MAAM,EAAET,IAAI,CAACC,SAAS,CAACW,WAAW,CAAC,CAAC;MACzDD,OAAO,CAACC,WAAW,CAAC;IACtB;IAEAE,kBAAkB,CAAC,IAAI,CAAC;IACxBC,QAAQ,CAAC,YAAY,CAAC;IACtB,OAAOb,IAAI;EAEb,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAIX,KAAK,CAACW,KAAK,CAACV,OAAO,IAAI,iCAAiC,CAAC;EACrE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}