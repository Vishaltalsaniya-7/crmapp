{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8082';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/login', credentials);\n      console.log('Login response:', response);\n      if (response.status === 200 && response.data) {\n        return {\n          user: {\n            email: credentials.email\n          },\n          token: response.data.token || response.data\n        };\n      }\n      throw new Error('Login failed');\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response3$data;\n      console.error('Login error:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Invalid credentials');\n    }\n  },\n  register: async userData => {\n    try {\n      var _response$data;\n      const response = await api.post('/register', userData);\n      if (response.status === 200 || response.status === 201) {\n        return response.data;\n      }\n      throw new Error(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || 'Registration failed');\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Registration error:', error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Registration failed');\n    }\n  }\n};\n// export const authService = {\n//     login: (credentials) => api.post('/login', credentials),\n//     register: (userData) => api.post('/register', userData),\n//   };\n\nexport const userService = {\n  getAllUsers: () => api.get('/user'),\n  getUserById: id => api.get(`/user/${id}`),\n  createUser: userData => api.post('/user', userData),\n  updateUser: (id, userData) => api.put(`/user/${id}`, userData),\n  updateUserRole: (id, roleData) => api.patch(`/user/${id}/role`, roleData),\n  deleteUser: id => api.delete(`/user/${id}`)\n};\nexport const customerService = {\n  getAllCustomers: () => api.get('/customer'),\n  getCustomerById: id => api.get(`/customer/${id}`),\n  createCustomer: customerData => api.post('/customer', customerData),\n  updateCustomer: (id, customerData) => api.put(`/customer/${id}`, customerData),\n  deleteCustomer: id => api.delete(`/customer/${id}`)\n};\nexport const leadService = {\n  getAllLeads: () => api.get('/lead'),\n  getLeadById: id => api.get(`/lead/${id}`),\n  createLead: leadData => api.post('/lead', leadData),\n  updateLead: (id, leadData) => api.put(`/lead/${id}`, leadData),\n  updateLeadStatus: (id, statusData) => api.patch(`/lead/${id}/status`, statusData),\n  deleteLead: id => api.delete(`/lead/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","credentials","post","console","log","data","user","email","Error","_error$response2","_error$response3","_error$response3$data","message","register","userData","_response$data","_error$response4","_error$response4$data","userService","getAllUsers","get","getUserById","id","createUser","updateUser","put","updateUserRole","roleData","patch","deleteUser","delete","customerService","getAllCustomers","getCustomerById","createCustomer","customerData","updateCustomer","deleteCustomer","leadService","getAllLeads","getLeadById","createLead","leadData","updateLead","updateLeadStatus","statusData","deleteLead"],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8082';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true\n});\n\n// Request interceptor\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n    login: async (credentials) => {\n      try {\n        const response = await api.post('/login', credentials);\n        console.log('Login response:', response);\n        \n        if (response.status === 200 && response.data) {\n          return {\n            user: { email: credentials.email },\n            token: response.data.token || response.data\n          };\n        }\n        throw new Error('Login failed');\n      } catch (error) {\n        console.error('Login error:', error.response?.data || error.message);\n        throw new Error(error.response?.data?.message || 'Invalid credentials');\n      }\n    },\n    \n    register: async (userData) => {\n      try {\n        const response = await api.post('/register', userData);\n        if (response.status === 200 || response.status === 201) {\n          return response.data;\n        }\n        throw new Error(response.data?.message || 'Registration failed');\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw new Error(error.response?.data?.message || 'Registration failed');\n      }\n    }\n  };\n// export const authService = {\n//     login: (credentials) => api.post('/login', credentials),\n//     register: (userData) => api.post('/register', userData),\n//   };\n\nexport const userService = {\n  getAllUsers: () => api.get('/user'),\n  getUserById: (id) => api.get(`/user/${id}`),\n  createUser: (userData) => api.post('/user', userData),\n  updateUser: (id, userData) => api.put(`/user/${id}`, userData),\n  updateUserRole: (id, roleData) => api.patch(`/user/${id}/role`, roleData),\n  deleteUser: (id) => api.delete(`/user/${id}`),\n};\n\nexport const customerService = {\n  getAllCustomers: () => api.get('/customer'),\n  getCustomerById: (id) => api.get(`/customer/${id}`),\n  createCustomer: (customerData) => api.post('/customer', customerData),\n  updateCustomer: (id, customerData) => api.put(`/customer/${id}`, customerData),\n  deleteCustomer: (id) => api.delete(`/customer/${id}`),\n};\n\nexport const leadService = {\n  getAllLeads: () => api.get('/lead'),\n  getLeadById: (id) => api.get(`/lead/${id}`),\n  createLead: (leadData) => api.post('/lead', leadData),\n  updateLead: (id, leadData) => api.put(`/lead/${id}`, leadData),\n  updateLeadStatus: (id, statusData) => api.patch(`/lead/${id}/status`, statusData),\n  deleteLead: (id) => api.delete(`/lead/${id}`),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}