{"ast":null,"code":"var _jsxFileName = \"/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/pages/customers/Customers.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, MenuItem } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerForm = ({\n  open,\n  onClose,\n  onSubmit,\n  customer\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    status: 'active'\n  });\n  useEffect(() => {\n    if (customer) {\n      setFormData(customer);\n    }\n  }, [customer]);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(formData);\n    setFormData({\n      name: '',\n      email: '',\n      phone: '',\n      company: '',\n      status: 'active'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: onClose,\n    maxWidth: \"sm\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: customer ? 'Edit Customer' : 'Add Customer'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"dense\",\n          name: \"name\",\n          label: \"Name\",\n          fullWidth: true,\n          value: formData.name,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"dense\",\n          name: \"email\",\n          label: \"Email\",\n          type: \"email\",\n          fullWidth: true,\n          value: formData.email,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"dense\",\n          name: \"phone\",\n          label: \"Phone\",\n          fullWidth: true,\n          value: formData.phone,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"dense\",\n          name: \"company\",\n          label: \"Company\",\n          fullWidth: true,\n          value: formData.company,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"dense\",\n          name: \"status\",\n          label: \"Status\",\n          select: true,\n          fullWidth: true,\n          value: formData.status,\n          onChange: handleChange,\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"active\",\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"inactive\",\n            children: \"Inactive\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: customer ? 'Update' : 'Add'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerForm, \"kpEQF8kPBCiYt24kxpF3d013Bjg=\");\n_c = CustomerForm;\nexport default CustomerForm;\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Button,\n//   Paper,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Typography,\n//   IconButton,\n//   Tooltip,\n// } from '@mui/material';\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n// } from '@mui/icons-material';\n// import CustomerForm from './CustomerForm';\n// import { customerService } from '../../services/customerService';\n\n// const Customers = () => {\n//   const [customers, setCustomers] = useState([]);\n//   const [openForm, setOpenForm] = useState(false);\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchCustomers();\n//   }, []);\n\n//   const fetchCustomers = async () => {\n//     try {\n//       const data = await customerService.getAll();\n//       setCustomers(data);\n//     } catch (error) {\n//       console.error('Error fetching customers:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleAddCustomer = async (customerData) => {\n//     try {\n//       const newCustomer = await customerService.create(customerData);\n//       setCustomers([...customers, newCustomer]);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error adding customer:', error);\n//     }\n//   };\n\n//   const handleEditCustomer = async (customerData) => {\n//     try {\n//       const updatedCustomer = await customerService.update(selectedCustomer.id, customerData);\n//       setCustomers(customers.map(customer => \n//         customer.id === selectedCustomer.id ? updatedCustomer : customer\n//       ));\n//       setSelectedCustomer(null);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error updating customer:', error);\n//     }\n//   };\n\n//   const handleDeleteCustomer = async (id) => {\n//     if (window.confirm('Are you sure you want to delete this customer?')) {\n//       try {\n//         await customerService.delete(id);\n//         setCustomers(customers.filter(customer => customer.id !== id));\n//       } catch (error) {\n//         console.error('Error deleting customer:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <Box sx={{ p: 3 }}>\n//       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n//         <Typography variant=\"h4\">Customers</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => setOpenForm(true)}\n//         >\n//           Add Customer\n//         </Button>\n//       </Box>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Email</TableCell>\n//               <TableCell>Phone</TableCell>\n//               <TableCell>Company</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell align=\"right\">Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {customers.map((customer) => (\n//               <TableRow key={customer.id}>\n//                 <TableCell>{customer.name}</TableCell>\n//                 <TableCell>{customer.email}</TableCell>\n//                 <TableCell>{customer.phone}</TableCell>\n//                 <TableCell>{customer.company}</TableCell>\n//                 <TableCell>{customer.status}</TableCell>\n//                 <TableCell align=\"right\">\n//                   <Tooltip title=\"Edit\">\n//                     <IconButton\n//                       onClick={() => {\n//                         setSelectedCustomer(customer);\n//                         setOpenForm(true);\n//                       }}\n//                     >\n//                       <EditIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                   <Tooltip title=\"Delete\">\n//                     <IconButton\n//                       onClick={() => handleDeleteCustomer(customer.id)}\n//                       color=\"error\"\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <CustomerForm\n//         open={openForm}\n//         onClose={() => {\n//           setOpenForm(false);\n//           setSelectedCustomer(null);\n//         }}\n//         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n//         customer={selectedCustomer}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default Customers;\n// // import React, { useState, useEffect } from 'react';// import {\n// // //   Box,\n// // //   Paper,\n// // //   Table,\n// // //   TableBody,\n// // //   TableCell,\n// // //   TableContainer,\n// // //   TableHead,\n// // //   TableRow,\n// // //   Typography,\n// // //   IconButton,\n// // //   Tooltip,\n// // //   Button,\n// // //   Chip\n// // // } from '@mui/material';\n// // // import {\n// // //   Edit as EditIcon,\n// // //   Delete as DeleteIcon,\n// // //   Add as AddIcon,\n// // //   Phone as PhoneIcon,\n// // //   Email as EmailIcon\n// // // } from '@mui/icons-material';\n// // import CustomerForm from '../../components/customers/CustomerForm';\n// // import Notification from '../../components/common/Notification';\n\n// // const Customers = () => {\n// //   const [customers, setCustomers] = useState([ {\n// //     id: 1,\n// //     name: 'John Doe',\n// //     email: 'john@example.com',\n// //     phone: '123-456-7890',\n// //     company: 'Tech Corp',\n// //     status: 'active',\n// //     value: 50000\n// //   },\n// //   {\n// //     id: 2,\n// //     name: 'Jane Smith',\n// //     email: 'jane@example.com',\n// //     phone: '098-765-4321',\n// //     company: 'Design Co',\n// //     status: 'inactive',\n// //     value: 25000\n// //   }]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [openForm, setOpenForm] = useState(false);\n// //   const [selectedCustomer, setSelectedCustomer] = useState(null);\n// //   const [notification, setNotification] = useState({\n// //     open: false,\n// //     message: '',\n// //     severity: 'success'\n// //   });\n\n// //   useEffect(() => {\n// //     fetchCustomers();\n// //   }, []);\n\n// //   const fetchCustomers = async () => {\n// //     try {\n// //       setLoading(true);\n// //       const response = await customerService.getCustomers();\n// //       setCustomers(response);\n// //     } catch (error) {\n// //       showNotification('Error fetching customers', 'error');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const showNotification = (message, severity = 'success') => {\n// //     setNotification({\n// //       open: true,\n// //       message,\n// //       severity\n// //     });\n// //   };\n\n// //   const handleCloseNotification = () => {\n// //     setNotification(prev => ({ ...prev, open: false }));\n// //   };\n\n// //   const handleAddCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.createCustomer(formData);\n// //       setCustomers([...customers, response]);\n// //       setOpenForm(false);\n// //       showNotification('Customer added successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error adding customer', 'error');\n// //     }\n// //   };\n\n// //   const handleEditCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.updateCustomer(selectedCustomer.id, formData);\n// //       setCustomers(customers.map(customer => \n// //         customer.id === selectedCustomer.id ? response : customer\n// //       ));\n// //       setSelectedCustomer(null);\n// //       setOpenForm(false);\n// //       showNotification('Customer updated successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error updating customer', 'error');\n// //     }\n// //   };\n\n// //   const handleDelete = async (customerId) => {\n// //     if (window.confirm('Are you sure you want to delete this customer?')) {\n// //       try {\n// //         await customerService.deleteCustomer(customerId);\n// //         setCustomers(customers.filter(customer => customer.id !== customerId));\n// //         showNotification('Customer deleted successfully');\n// //       } catch (error) {\n// //         showNotification(error.message || 'Error deleting customer', 'error');\n// //       }\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Box sx={{ p: 3 }}>\n// //       {/* ... existing JSX code ... */}\n\n// //       <CustomerForm\n// //         open={openForm}\n// //         onClose={() => {\n// //           setOpenForm(false);\n// //           setSelectedCustomer(null);\n// //         }}\n// //         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n// //         initialData={selectedCustomer}\n// //       />\n\n// //       <Notification\n// //         open={notification.open}\n// //         message={notification.message}\n// //         severity={notification.severity}\n// //         onClose={handleCloseNotification}\n// //       />\n// //     </Box>\n// //   );\n// // };\n\n// // export default Customers;\nvar _c;\n$RefreshReg$(_c, \"CustomerForm\");","map":{"version":3,"names":["React","useState","useEffect","Dialog","DialogTitle","DialogContent","DialogActions","TextField","Button","MenuItem","jsxDEV","_jsxDEV","CustomerForm","open","onClose","onSubmit","customer","_s","formData","setFormData","name","email","phone","company","status","handleChange","e","target","value","handleSubmit","preventDefault","maxWidth","fullWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","margin","label","onChange","required","type","select","onClick","variant","color","_c","$RefreshReg$"],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/pages/customers/Customers.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  MenuItem,\n} from '@mui/material';\n\nconst CustomerForm = ({ open, onClose, onSubmit, customer }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    status: 'active',\n  });\n\n  useEffect(() => {\n    if (customer) {\n      setFormData(customer);\n    }\n  }, [customer]);\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(formData);\n    setFormData({\n      name: '',\n      email: '',\n      phone: '',\n      company: '',\n      status: 'active',\n    });\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{customer ? 'Edit Customer' : 'Add Customer'}</DialogTitle>\n      <form onSubmit={handleSubmit}>\n        <DialogContent>\n          <TextField\n            margin=\"dense\"\n            name=\"name\"\n            label=\"Name\"\n            fullWidth\n            value={formData.name}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            margin=\"dense\"\n            name=\"email\"\n            label=\"Email\"\n            type=\"email\"\n            fullWidth\n            value={formData.email}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            margin=\"dense\"\n            name=\"phone\"\n            label=\"Phone\"\n            fullWidth\n            value={formData.phone}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            margin=\"dense\"\n            name=\"company\"\n            label=\"Company\"\n            fullWidth\n            value={formData.company}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            margin=\"dense\"\n            name=\"status\"\n            label=\"Status\"\n            select\n            fullWidth\n            value={formData.status}\n            onChange={handleChange}\n            required\n          >\n            <MenuItem value=\"active\">Active</MenuItem>\n            <MenuItem value=\"inactive\">Inactive</MenuItem>\n          </TextField>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {customer ? 'Update' : 'Add'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default CustomerForm;\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Button,\n//   Paper,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Typography,\n//   IconButton,\n//   Tooltip,\n// } from '@mui/material';\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n// } from '@mui/icons-material';\n// import CustomerForm from './CustomerForm';\n// import { customerService } from '../../services/customerService';\n\n// const Customers = () => {\n//   const [customers, setCustomers] = useState([]);\n//   const [openForm, setOpenForm] = useState(false);\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchCustomers();\n//   }, []);\n\n//   const fetchCustomers = async () => {\n//     try {\n//       const data = await customerService.getAll();\n//       setCustomers(data);\n//     } catch (error) {\n//       console.error('Error fetching customers:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleAddCustomer = async (customerData) => {\n//     try {\n//       const newCustomer = await customerService.create(customerData);\n//       setCustomers([...customers, newCustomer]);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error adding customer:', error);\n//     }\n//   };\n\n//   const handleEditCustomer = async (customerData) => {\n//     try {\n//       const updatedCustomer = await customerService.update(selectedCustomer.id, customerData);\n//       setCustomers(customers.map(customer => \n//         customer.id === selectedCustomer.id ? updatedCustomer : customer\n//       ));\n//       setSelectedCustomer(null);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error updating customer:', error);\n//     }\n//   };\n\n//   const handleDeleteCustomer = async (id) => {\n//     if (window.confirm('Are you sure you want to delete this customer?')) {\n//       try {\n//         await customerService.delete(id);\n//         setCustomers(customers.filter(customer => customer.id !== id));\n//       } catch (error) {\n//         console.error('Error deleting customer:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <Box sx={{ p: 3 }}>\n//       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n//         <Typography variant=\"h4\">Customers</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => setOpenForm(true)}\n//         >\n//           Add Customer\n//         </Button>\n//       </Box>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Email</TableCell>\n//               <TableCell>Phone</TableCell>\n//               <TableCell>Company</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell align=\"right\">Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {customers.map((customer) => (\n//               <TableRow key={customer.id}>\n//                 <TableCell>{customer.name}</TableCell>\n//                 <TableCell>{customer.email}</TableCell>\n//                 <TableCell>{customer.phone}</TableCell>\n//                 <TableCell>{customer.company}</TableCell>\n//                 <TableCell>{customer.status}</TableCell>\n//                 <TableCell align=\"right\">\n//                   <Tooltip title=\"Edit\">\n//                     <IconButton\n//                       onClick={() => {\n//                         setSelectedCustomer(customer);\n//                         setOpenForm(true);\n//                       }}\n//                     >\n//                       <EditIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                   <Tooltip title=\"Delete\">\n//                     <IconButton\n//                       onClick={() => handleDeleteCustomer(customer.id)}\n//                       color=\"error\"\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <CustomerForm\n//         open={openForm}\n//         onClose={() => {\n//           setOpenForm(false);\n//           setSelectedCustomer(null);\n//         }}\n//         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n//         customer={selectedCustomer}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default Customers;\n// // import React, { useState, useEffect } from 'react';// import {\n// // //   Box,\n// // //   Paper,\n// // //   Table,\n// // //   TableBody,\n// // //   TableCell,\n// // //   TableContainer,\n// // //   TableHead,\n// // //   TableRow,\n// // //   Typography,\n// // //   IconButton,\n// // //   Tooltip,\n// // //   Button,\n// // //   Chip\n// // // } from '@mui/material';\n// // // import {\n// // //   Edit as EditIcon,\n// // //   Delete as DeleteIcon,\n// // //   Add as AddIcon,\n// // //   Phone as PhoneIcon,\n// // //   Email as EmailIcon\n// // // } from '@mui/icons-material';\n// // import CustomerForm from '../../components/customers/CustomerForm';\n// // import Notification from '../../components/common/Notification';\n\n// // const Customers = () => {\n// //   const [customers, setCustomers] = useState([ {\n// //     id: 1,\n// //     name: 'John Doe',\n// //     email: 'john@example.com',\n// //     phone: '123-456-7890',\n// //     company: 'Tech Corp',\n// //     status: 'active',\n// //     value: 50000\n// //   },\n// //   {\n// //     id: 2,\n// //     name: 'Jane Smith',\n// //     email: 'jane@example.com',\n// //     phone: '098-765-4321',\n// //     company: 'Design Co',\n// //     status: 'inactive',\n// //     value: 25000\n// //   }]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [openForm, setOpenForm] = useState(false);\n// //   const [selectedCustomer, setSelectedCustomer] = useState(null);\n// //   const [notification, setNotification] = useState({\n// //     open: false,\n// //     message: '',\n// //     severity: 'success'\n// //   });\n\n// //   useEffect(() => {\n// //     fetchCustomers();\n// //   }, []);\n\n// //   const fetchCustomers = async () => {\n// //     try {\n// //       setLoading(true);\n// //       const response = await customerService.getCustomers();\n// //       setCustomers(response);\n// //     } catch (error) {\n// //       showNotification('Error fetching customers', 'error');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const showNotification = (message, severity = 'success') => {\n// //     setNotification({\n// //       open: true,\n// //       message,\n// //       severity\n// //     });\n// //   };\n\n// //   const handleCloseNotification = () => {\n// //     setNotification(prev => ({ ...prev, open: false }));\n// //   };\n\n// //   const handleAddCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.createCustomer(formData);\n// //       setCustomers([...customers, response]);\n// //       setOpenForm(false);\n// //       showNotification('Customer added successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error adding customer', 'error');\n// //     }\n// //   };\n\n// //   const handleEditCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.updateCustomer(selectedCustomer.id, formData);\n// //       setCustomers(customers.map(customer => \n// //         customer.id === selectedCustomer.id ? response : customer\n// //       ));\n// //       setSelectedCustomer(null);\n// //       setOpenForm(false);\n// //       showNotification('Customer updated successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error updating customer', 'error');\n// //     }\n// //   };\n\n// //   const handleDelete = async (customerId) => {\n// //     if (window.confirm('Are you sure you want to delete this customer?')) {\n// //       try {\n// //         await customerService.deleteCustomer(customerId);\n// //         setCustomers(customers.filter(customer => customer.id !== customerId));\n// //         showNotification('Customer deleted successfully');\n// //       } catch (error) {\n// //         showNotification(error.message || 'Error deleting customer', 'error');\n// //       }\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Box sx={{ p: 3 }}>\n// //       {/* ... existing JSX code ... */}\n      \n// //       <CustomerForm\n// //         open={openForm}\n// //         onClose={() => {\n// //           setOpenForm(false);\n// //           setSelectedCustomer(null);\n// //         }}\n// //         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n// //         initialData={selectedCustomer}\n// //       />\n\n// //       <Notification\n// //         open={notification.open}\n// //         message={notification.message}\n// //         severity={notification.severity}\n// //         onClose={handleCloseNotification}\n// //       />\n// //     </Box>\n// //   );\n// // };\n\n// // export default Customers;"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}