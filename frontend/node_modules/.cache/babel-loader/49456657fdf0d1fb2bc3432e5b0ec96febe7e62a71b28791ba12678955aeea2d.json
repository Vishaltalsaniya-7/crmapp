{"ast":null,"code":"var _jsxFileName = \"/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/components/users/Users.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   IconButton,\n//   Chip,\n//   Tooltip,\n//   Snackbar,\n//   Alert\n// } from '@mui/material';\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n// } from '@mui/icons-material';\n// import PageHeader from '../common/PageHeader';\n// import SearchBar from '../common/SearchBar';\n// import FilterBar from '../common/FilterBar';\n// import DataTable from '../common/DataTable';\n// import UserForm from './UserForm';\n\n// const Users = () => {\n//   const [users, setUsers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [openForm, setOpenForm] = useState(false);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [filters, setFilters] = useState({});\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n\n//   const columns = [\n//     { id: 'username', label: 'Username' },\n//     { id: 'email', label: 'Email' },\n//     {\n//       id: 'role',\n//       label: 'Role',\n//       render: (row) => (\n//         <Chip\n//           label={row.role}\n//           color={row.role === 'admin' ? 'primary' : 'default'}\n//           size=\"small\"\n//         />\n//       )\n//     },\n//     {\n//       id: 'created_at',\n//       label: 'Created At',\n//       render: (row) => new Date(row.created_at).toLocaleDateString()\n//     },\n//     {\n//       id: 'actions',\n//       label: 'Actions',\n//       render: (row) => (\n//         <Box sx={{ display: 'flex', gap: 1 }}>\n//           <Tooltip title=\"Edit\">\n//             <IconButton size=\"small\" onClick={() => handleEdit(row)}>\n//               <EditIcon />\n//             </IconButton>\n//           </Tooltip>\n//           <Tooltip title=\"Delete\">\n//             <IconButton size=\"small\" color=\"error\" onClick={() => handleDelete(row.id)}>\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         </Box>\n//       ),\n//     },\n//   ];\n\n//   const filterOptions = [\n//     { id: 'role', label: 'Role', options: ['admin', 'user'] },\n//   ];\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, [filters, searchTerm]);\n\n//   const showSnackbar = (message, severity = 'success') => {\n//     setSnackbar({ open: true, message, severity });\n//   };\n\n//   const fetchUsers = async () => {\n//     try {\n//       setLoading(true);\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         throw new Error('Authentication required');\n//       }\n\n//       const response = await fetch('http://localhost:8082/user', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (!response.ok) {\n//         const error = await response.json();\n//         throw new Error(error.message || 'Failed to fetch users');\n//       }\n\n//       const data = await response.json();\n//       setUsers(Array.isArray(data) ? data : []);\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//       showSnackbar(error.message, 'error');\n//       setUsers([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleAdd = () => {\n//     setSelectedUser(null);\n//     setOpenForm(true);\n//   };\n\n//   const handleEdit = (user) => {\n//     setSelectedUser(user);\n//     setOpenForm(true);\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (window.confirm('Are you sure you want to delete this user?')) {\n//       try {\n//         const token = localStorage.getItem('token');\n//         if (!token) throw new Error('Authentication required');\n\n//         const response = await fetch(`http://localhost:8082/user/${id}`, {\n//           method: 'DELETE',\n//           headers: {\n//             'Authorization': `Bearer ${token}`\n//           }\n//         });\n\n//         if (!response.ok) {\n//           const error = await response.json();\n//           throw new Error(error.message || 'Failed to delete user');\n//         }\n\n//         showSnackbar('User deleted successfully');\n//         fetchUsers();\n//       } catch (error) {\n//         console.error('Error deleting user:', error);\n//         showSnackbar(error.message, 'error');\n//       }\n//     }\n//   };  \n//   //   const handleSubmit = async (userData) => {\n//   //   try {\n//   //     const url = selectedUser \n//   //       ? `http://localhost:8082/user/${selectedUser.id}`\n//   //       : 'http://localhost:8082/user';\n\n//   //     // For new user creation, we don't need token\n//   //     const token = selectedUser ? localStorage.getItem('token') : null;\n\n//   //     const requestBody = {\n//   //       username: userData.username.trim(),\n//   //       email: userData.email.trim(),\n//   //       role: userData.role,\n//   //       password: userData.password // Always include password for both create and update\n//   //     };\n\n//   //     const headers = {\n//   //       'Content-Type': 'application/json'\n//   //     };\n\n//   //     // // Only add Authorization header for updates, not for creation\n//   //     // if (selectedUser && token) {\n//   //     //   headers['Authorization'] = `Bearer ${token}`;\n//   //     // }\n//   //     if (selectedUser) {\n//   //       const token = localStorage.getItem('token');\n//   //       if (!token) throw new Error('Authentication required for updating user');\n//   //       headers['Authorization'] = `Bearer ${token}`;\n//   //     }\n\n//   //     const response = await fetch(url, {\n//   //       method: selectedUser ? 'PUT' : 'POST',\n//   //       headers: headers,\n//   //       body: JSON.stringify(requestBody),\n//   //     });\n\n//   //     const data = await response.json();\n\n//   //     if (!response.ok) {\n//   //       throw new Error(data.message || 'Failed to save user');\n//   //     }\n\n//   //     showSnackbar(`User ${selectedUser ? 'updated' : 'created'} successfully`);\n//   //     setOpenForm(false);\n//   //     await fetchUsers();\n//   //   } catch (error) {\n//   //     console.error('Error saving user:', error);\n//   //     showSnackbar(error.message || 'Failed to save user', 'error');\n//   //   }\n//   // };\n//   const handleSubmit = async (userData) => {\n//     try {\n//       const url = selectedUser \n//         ? `http://localhost:8082/user/${selectedUser.id}`\n//         : 'http://localhost:8082/user';\n\n//       const token = localStorage.getItem('token');\n//       const userEmail = localStorage.getItem('email'); // Get current user's email\n//       console.log('Token:', token);\n//       console.log('User Email:', userEmail);\n\n//       const requestBody = {\n//         username: userData.username.trim(),\n//         email: userData.email.trim(),\n//         password: userData.password,\n//         role: userData.role || 'user',\n//         user_email: userEmail // Add user_email to request body\n//       };\n//       console.log('Request Body:', requestBody);\n\n//       const response = await fetch(url, {\n//         method: selectedUser ? 'PUT' : 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`,\n//           'X-User-Email': userEmail // Add email in header as well\n//         },\n//         body: JSON.stringify(requestBody)\n//       });\n\n//       const data = await response.json();\n//       console.log('Response:', data);\n\n//       if (!response.ok) {\n//         if (data.error) {\n//           throw new Error(data.error);\n//         }\n//         throw new Error('Failed to save user');\n//       }\n\n//       showSnackbar(`User ${selectedUser ? 'updated' : 'created'} successfully`);\n//       setOpenForm(false);\n//       await fetchUsers();\n//     } catch (error) {\n//       console.error('Error saving user:', error);\n//       showSnackbar(error.message, 'error');\n//     }\n//   };    const handleSearch = (term) => {\n//     setSearchTerm(term);\n//     // Implement search logic here if needed\n//   };\n\n//   const handleFilterChange = (filterId, value) => {\n//     setFilters(prev => ({\n//       ...prev,\n//       [filterId]: value\n//     }));\n//     // Implement filter logic here if needed\n//   };\n\n//   return (\n//     <Box sx={{ p: 3 }}>\n//       <PageHeader\n//         title=\"Users\"\n//         action={true}\n//         actionText=\"Add User\"\n//         actionIcon={<AddIcon />}\n//         onActionClick={handleAdd}\n//       />\n\n//       <Box sx={{ mb: 3 }}>\n//         <SearchBar\n//           onSearch={handleSearch}\n//           placeholder=\"Search users...\"\n//         />\n//         <FilterBar\n//           filters={filterOptions}\n//           activeFilters={filters}\n//           onFilterChange={handleFilterChange}\n//           onClearFilters={() => setFilters({})}\n//         />\n//       </Box>\n\n//       <DataTable\n//         columns={columns}\n//         data={users}\n//         loading={loading}\n//       />\n\n//       <UserForm\n//         open={openForm}\n//         user={selectedUser}\n//         onClose={() => setOpenForm(false)}\n//         onSubmit={handleSubmit}\n//       />\n\n//       <Snackbar\n//         open={snackbar.open}\n//         autoHideDuration={6000}\n//         onClose={() => setSnackbar({ ...snackbar, open: false })}\n//       >\n//         <Alert\n//           onClose={() => setSnackbar({ ...snackbar, open: false })}\n//           severity={snackbar.severity}\n//           sx={{ width: '100%' }}\n//         >\n//           {snackbar.message}\n//         </Alert>\n//       </Snackbar>\n//     </Box>\n//   );\n// };\n\n// export default Users;\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, IconButton, Chip, Tooltip } from '@mui/material';\nimport { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport PageHeader from '../common/PageHeader';\nimport SearchBar from '../common/SearchBar';\nimport FilterBar from '../common/FilterBar';\nimport DataTable from '../common/DataTable';\nimport UserForm from './UserForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Users = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [openForm, setOpenForm] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [filters, setFilters] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const columns = [{\n    id: 'username',\n    label: 'Username'\n  }, {\n    id: 'email',\n    label: 'Email'\n  }, {\n    id: 'role',\n    label: 'Role',\n    render: row => /*#__PURE__*/_jsxDEV(Chip, {\n      label: row.role,\n      color: row.role === 'admin' ? 'primary' : 'default',\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'created_at',\n    label: 'Created At',\n    render: row => new Date(row.created_at).toLocaleDateString()\n  }, {\n    id: 'actions',\n    label: 'Actions',\n    render: row => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Edit\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: () => handleEdit(row),\n          children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Delete\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          color: \"error\",\n          onClick: () => handleDelete(row.id),\n          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this)\n  }];\n  const filterOptions = [{\n    id: 'role',\n    label: 'Role',\n    options: ['admin', 'user']\n  }];\n  useEffect(() => {\n    fetchUsers();\n  }, [filters, searchTerm]);\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('http://localhost:8082/user');\n      if (!response.ok) throw new Error('Failed to fetch users');\n      const data = await response.json();\n      setUsers(data);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setUsers([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAdd = () => {\n    setSelectedUser(null);\n    setOpenForm(true);\n  };\n  const handleEdit = user => {\n    setSelectedUser(user);\n    setOpenForm(true);\n  };\n  const handleDelete = async id => {\n    if (window.confirm('Are you sure you want to delete this user?')) {\n      try {\n        const response = await fetch(`http://localhost:8082/user/${id}`, {\n          method: 'DELETE'\n        });\n        if (response.ok) {\n          fetchUsers();\n        }\n      } catch (error) {\n        console.error('Error deleting user:', error);\n      }\n    }\n  };\n  const handleSubmit = async userData => {\n    try {\n      const url = selectedUser ? `http://localhost:8082/user/${selectedUser.id}` : 'http://localhost:8082/user';\n      const response = await fetch(url, {\n        method: selectedUser ? 'PUT' : 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (response.ok) {\n        setOpenForm(false);\n        fetchUsers();\n      }\n    } catch (error) {\n      console.error('Error saving user:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: \"Users\",\n      action: true,\n      actionText: \"Add User\",\n      actionIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 21\n      }, this),\n      onActionClick: handleAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: setSearchTerm,\n        placeholder: \"Search users...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n        filters: filterOptions,\n        activeFilters: filters,\n        onFilterChange: (id, value) => setFilters({\n          ...filters,\n          [id]: value\n        }),\n        onClearFilters: () => setFilters({})\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      columns: columns,\n      data: users,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserForm, {\n      open: openForm,\n      user: selectedUser,\n      onClose: () => setOpenForm(false),\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 451,\n    columnNumber: 5\n  }, this);\n};\n_s(Users, \"pTNm8Jsb3khT0HrWrIg36rvd/AI=\");\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useState","useEffect","Box","IconButton","Chip","Tooltip","Add","AddIcon","Edit","EditIcon","Delete","DeleteIcon","PageHeader","SearchBar","FilterBar","DataTable","UserForm","jsxDEV","_jsxDEV","Users","_s","users","setUsers","loading","setLoading","openForm","setOpenForm","selectedUser","setSelectedUser","filters","setFilters","searchTerm","setSearchTerm","columns","id","label","render","row","role","color","size","fileName","_jsxFileName","lineNumber","columnNumber","Date","created_at","toLocaleDateString","sx","display","gap","children","title","onClick","handleEdit","handleDelete","filterOptions","options","fetchUsers","response","fetch","ok","Error","data","json","error","console","handleAdd","user","window","confirm","method","handleSubmit","userData","url","headers","body","JSON","stringify","p","action","actionText","actionIcon","onActionClick","mb","onSearch","placeholder","activeFilters","onFilterChange","value","onClearFilters","open","onClose","onSubmit","_c","$RefreshReg$"],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/components/users/Users.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//   Box,\r\n//   IconButton,\r\n//   Chip,\r\n//   Tooltip,\r\n//   Snackbar,\r\n//   Alert\r\n// } from '@mui/material';\r\n// import {\r\n//   Add as AddIcon,\r\n//   Edit as EditIcon,\r\n//   Delete as DeleteIcon,\r\n// } from '@mui/icons-material';\r\n// import PageHeader from '../common/PageHeader';\r\n// import SearchBar from '../common/SearchBar';\r\n// import FilterBar from '../common/FilterBar';\r\n// import DataTable from '../common/DataTable';\r\n// import UserForm from './UserForm';\r\n\r\n// const Users = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [openForm, setOpenForm] = useState(false);\r\n//   const [selectedUser, setSelectedUser] = useState(null);\r\n//   const [filters, setFilters] = useState({});\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\r\n\r\n//   const columns = [\r\n//     { id: 'username', label: 'Username' },\r\n//     { id: 'email', label: 'Email' },\r\n//     {\r\n//       id: 'role',\r\n//       label: 'Role',\r\n//       render: (row) => (\r\n//         <Chip\r\n//           label={row.role}\r\n//           color={row.role === 'admin' ? 'primary' : 'default'}\r\n//           size=\"small\"\r\n//         />\r\n//       )\r\n//     },\r\n//     {\r\n//       id: 'created_at',\r\n//       label: 'Created At',\r\n//       render: (row) => new Date(row.created_at).toLocaleDateString()\r\n//     },\r\n//     {\r\n//       id: 'actions',\r\n//       label: 'Actions',\r\n//       render: (row) => (\r\n//         <Box sx={{ display: 'flex', gap: 1 }}>\r\n//           <Tooltip title=\"Edit\">\r\n//             <IconButton size=\"small\" onClick={() => handleEdit(row)}>\r\n//               <EditIcon />\r\n//             </IconButton>\r\n//           </Tooltip>\r\n//           <Tooltip title=\"Delete\">\r\n//             <IconButton size=\"small\" color=\"error\" onClick={() => handleDelete(row.id)}>\r\n//               <DeleteIcon />\r\n//             </IconButton>\r\n//           </Tooltip>\r\n//         </Box>\r\n//       ),\r\n//     },\r\n//   ];\r\n\r\n//   const filterOptions = [\r\n//     { id: 'role', label: 'Role', options: ['admin', 'user'] },\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, [filters, searchTerm]);\r\n\r\n//   const showSnackbar = (message, severity = 'success') => {\r\n//     setSnackbar({ open: true, message, severity });\r\n//   };\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const token = localStorage.getItem('token');\r\n//       if (!token) {\r\n//         throw new Error('Authentication required');\r\n//       }\r\n\r\n//       const response = await fetch('http://localhost:8082/user', {\r\n//         headers: {\r\n//           'Authorization': `Bearer ${token}`\r\n//         }\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const error = await response.json();\r\n//         throw new Error(error.message || 'Failed to fetch users');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setUsers(Array.isArray(data) ? data : []);\r\n//     } catch (error) {\r\n//       console.error('Error fetching users:', error);\r\n//       showSnackbar(error.message, 'error');\r\n//       setUsers([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleAdd = () => {\r\n//     setSelectedUser(null);\r\n//     setOpenForm(true);\r\n//   };\r\n\r\n//   const handleEdit = (user) => {\r\n//     setSelectedUser(user);\r\n//     setOpenForm(true);\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (window.confirm('Are you sure you want to delete this user?')) {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         if (!token) throw new Error('Authentication required');\r\n\r\n//         const response = await fetch(`http://localhost:8082/user/${id}`, {\r\n//           method: 'DELETE',\r\n//           headers: {\r\n//             'Authorization': `Bearer ${token}`\r\n//           }\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n//           const error = await response.json();\r\n//           throw new Error(error.message || 'Failed to delete user');\r\n//         }\r\n\r\n//         showSnackbar('User deleted successfully');\r\n//         fetchUsers();\r\n//       } catch (error) {\r\n//         console.error('Error deleting user:', error);\r\n//         showSnackbar(error.message, 'error');\r\n//       }\r\n//     }\r\n//   };  \r\n//   //   const handleSubmit = async (userData) => {\r\n//   //   try {\r\n//   //     const url = selectedUser \r\n//   //       ? `http://localhost:8082/user/${selectedUser.id}`\r\n//   //       : 'http://localhost:8082/user';\r\n\r\n//   //     // For new user creation, we don't need token\r\n//   //     const token = selectedUser ? localStorage.getItem('token') : null;\r\n      \r\n//   //     const requestBody = {\r\n//   //       username: userData.username.trim(),\r\n//   //       email: userData.email.trim(),\r\n//   //       role: userData.role,\r\n//   //       password: userData.password // Always include password for both create and update\r\n//   //     };\r\n\r\n//   //     const headers = {\r\n//   //       'Content-Type': 'application/json'\r\n//   //     };\r\n\r\n//   //     // // Only add Authorization header for updates, not for creation\r\n//   //     // if (selectedUser && token) {\r\n//   //     //   headers['Authorization'] = `Bearer ${token}`;\r\n//   //     // }\r\n//   //     if (selectedUser) {\r\n//   //       const token = localStorage.getItem('token');\r\n//   //       if (!token) throw new Error('Authentication required for updating user');\r\n//   //       headers['Authorization'] = `Bearer ${token}`;\r\n//   //     }\r\n\r\n//   //     const response = await fetch(url, {\r\n//   //       method: selectedUser ? 'PUT' : 'POST',\r\n//   //       headers: headers,\r\n//   //       body: JSON.stringify(requestBody),\r\n//   //     });\r\n\r\n//   //     const data = await response.json();\r\n\r\n//   //     if (!response.ok) {\r\n//   //       throw new Error(data.message || 'Failed to save user');\r\n//   //     }\r\n\r\n//   //     showSnackbar(`User ${selectedUser ? 'updated' : 'created'} successfully`);\r\n//   //     setOpenForm(false);\r\n//   //     await fetchUsers();\r\n//   //   } catch (error) {\r\n//   //     console.error('Error saving user:', error);\r\n//   //     showSnackbar(error.message || 'Failed to save user', 'error');\r\n//   //   }\r\n//   // };\r\n//   const handleSubmit = async (userData) => {\r\n//     try {\r\n//       const url = selectedUser \r\n//         ? `http://localhost:8082/user/${selectedUser.id}`\r\n//         : 'http://localhost:8082/user';\r\n\r\n//       const token = localStorage.getItem('token');\r\n//       const userEmail = localStorage.getItem('email'); // Get current user's email\r\n//       console.log('Token:', token);\r\n//       console.log('User Email:', userEmail);\r\n\r\n//       const requestBody = {\r\n//         username: userData.username.trim(),\r\n//         email: userData.email.trim(),\r\n//         password: userData.password,\r\n//         role: userData.role || 'user',\r\n//         user_email: userEmail // Add user_email to request body\r\n//       };\r\n//       console.log('Request Body:', requestBody);\r\n\r\n//       const response = await fetch(url, {\r\n//         method: selectedUser ? 'PUT' : 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           'Authorization': `Bearer ${token}`,\r\n//           'X-User-Email': userEmail // Add email in header as well\r\n//         },\r\n//         body: JSON.stringify(requestBody)\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log('Response:', data);\r\n\r\n//       if (!response.ok) {\r\n//         if (data.error) {\r\n//           throw new Error(data.error);\r\n//         }\r\n//         throw new Error('Failed to save user');\r\n//       }\r\n\r\n//       showSnackbar(`User ${selectedUser ? 'updated' : 'created'} successfully`);\r\n//       setOpenForm(false);\r\n//       await fetchUsers();\r\n//     } catch (error) {\r\n//       console.error('Error saving user:', error);\r\n//       showSnackbar(error.message, 'error');\r\n//     }\r\n//   };    const handleSearch = (term) => {\r\n//     setSearchTerm(term);\r\n//     // Implement search logic here if needed\r\n//   };\r\n\r\n//   const handleFilterChange = (filterId, value) => {\r\n//     setFilters(prev => ({\r\n//       ...prev,\r\n//       [filterId]: value\r\n//     }));\r\n//     // Implement filter logic here if needed\r\n//   };\r\n\r\n//   return (\r\n//     <Box sx={{ p: 3 }}>\r\n//       <PageHeader\r\n//         title=\"Users\"\r\n//         action={true}\r\n//         actionText=\"Add User\"\r\n//         actionIcon={<AddIcon />}\r\n//         onActionClick={handleAdd}\r\n//       />\r\n\r\n//       <Box sx={{ mb: 3 }}>\r\n//         <SearchBar\r\n//           onSearch={handleSearch}\r\n//           placeholder=\"Search users...\"\r\n//         />\r\n//         <FilterBar\r\n//           filters={filterOptions}\r\n//           activeFilters={filters}\r\n//           onFilterChange={handleFilterChange}\r\n//           onClearFilters={() => setFilters({})}\r\n//         />\r\n//       </Box>\r\n\r\n//       <DataTable\r\n//         columns={columns}\r\n//         data={users}\r\n//         loading={loading}\r\n//       />\r\n\r\n//       <UserForm\r\n//         open={openForm}\r\n//         user={selectedUser}\r\n//         onClose={() => setOpenForm(false)}\r\n//         onSubmit={handleSubmit}\r\n//       />\r\n\r\n//       <Snackbar\r\n//         open={snackbar.open}\r\n//         autoHideDuration={6000}\r\n//         onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n//       >\r\n//         <Alert\r\n//           onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n//           severity={snackbar.severity}\r\n//           sx={{ width: '100%' }}\r\n//         >\r\n//           {snackbar.message}\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default Users;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Chip,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n} from '@mui/icons-material';\r\nimport PageHeader from '../common/PageHeader';\r\nimport SearchBar from '../common/SearchBar';\r\nimport FilterBar from '../common/FilterBar';\r\nimport DataTable from '../common/DataTable';\r\nimport UserForm from './UserForm';\r\n\r\nconst Users = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [openForm, setOpenForm] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [filters, setFilters] = useState({});\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const columns = [\r\n    { id: 'username', label: 'Username' },\r\n    { id: 'email', label: 'Email' },\r\n    {\r\n      id: 'role',\r\n      label: 'Role',\r\n      render: (row) => (\r\n        <Chip\r\n          label={row.role}\r\n          color={row.role === 'admin' ? 'primary' : 'default'}\r\n          size=\"small\"\r\n        />\r\n      )\r\n    },\r\n    {\r\n      id: 'created_at',\r\n      label: 'Created At',\r\n      render: (row) => new Date(row.created_at).toLocaleDateString()\r\n    },\r\n    {\r\n      id: 'actions',\r\n      label: 'Actions',\r\n      render: (row) => (\r\n        <Box sx={{ display: 'flex', gap: 1 }}>\r\n          <Tooltip title=\"Edit\">\r\n            <IconButton size=\"small\" onClick={() => handleEdit(row)}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Delete\">\r\n            <IconButton size=\"small\" color=\"error\" onClick={() => handleDelete(row.id)}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Box>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const filterOptions = [\r\n    { id: 'role', label: 'Role', options: ['admin', 'user'] },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, [filters, searchTerm]);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('http://localhost:8082/user');\r\n      if (!response.ok) throw new Error('Failed to fetch users');\r\n      const data = await response.json();\r\n      setUsers(data);\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      setUsers([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    setSelectedUser(null);\r\n    setOpenForm(true);\r\n  };\r\n\r\n  const handleEdit = (user) => {\r\n    setSelectedUser(user);\r\n    setOpenForm(true);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm('Are you sure you want to delete this user?')) {\r\n      try {\r\n        const response = await fetch(`http://localhost:8082/user/${id}`, {\r\n          method: 'DELETE',\r\n        });\r\n        if (response.ok) {\r\n          fetchUsers();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting user:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (userData) => {\r\n    try {\r\n      const url = selectedUser \r\n        ? `http://localhost:8082/user/${selectedUser.id}`\r\n        : 'http://localhost:8082/user';\r\n      \r\n      const response = await fetch(url, {\r\n        method: selectedUser ? 'PUT' : 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setOpenForm(false);\r\n        fetchUsers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving user:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <PageHeader\r\n        title=\"Users\"\r\n        action={true}\r\n        actionText=\"Add User\"\r\n        actionIcon={<AddIcon />}\r\n        onActionClick={handleAdd}\r\n      />\r\n\r\n      <Box sx={{ mb: 3 }}>\r\n        <SearchBar\r\n          onSearch={setSearchTerm}\r\n          placeholder=\"Search users...\"\r\n        />\r\n        <FilterBar\r\n          filters={filterOptions}\r\n          activeFilters={filters}\r\n          onFilterChange={(id, value) => setFilters({ ...filters, [id]: value })}\r\n          onClearFilters={() => setFilters({})}\r\n        />\r\n      </Box>\r\n\r\n      <DataTable\r\n        columns={columns}\r\n        data={users}\r\n        loading={loading}\r\n      />\r\n\r\n      <UserForm\r\n        open={openForm}\r\n        user={selectedUser}\r\n        onClose={() => setOpenForm(false)}\r\n        onSubmit={handleSubmit}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}