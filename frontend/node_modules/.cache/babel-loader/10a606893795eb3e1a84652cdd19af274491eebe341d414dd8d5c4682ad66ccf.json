{"ast":null,"code":"var _jsxFileName = \"/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/components/common/DataTable.js\";\nimport React from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, CircularProgress, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataTable = ({\n  columns,\n  data,\n  loading\n}) => {\n  var _data$leads;\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Handle both nested and direct data structures\n  const tableData = (data === null || data === void 0 ? void 0 : (_data$leads = data.leads) === null || _data$leads === void 0 ? void 0 : _data$leads.lead) || (Array.isArray(data) ? data : []);\n  console.log('DataTable received:', tableData); // Debug log\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column.label\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: tableData.length === 0 ? /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            colSpan: columns.length,\n            align: \"center\",\n            children: \"No data available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this) : tableData.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column.render ? column.render(row) : row[column.id]\n          }, `${row.id || row.ID || index}-${column.id}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 19\n          }, this))\n        }, row.id || row.ID || index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = DataTable;\nexport default DataTable;\n// import React from 'react';\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   CircularProgress,\n//   Box,\n// } from '@mui/material';\n\n// const DataTable = ({ columns, data, loading }) => {\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   const tableData = Array.isArray(data) ? data : [];\n//   console.log('DataTable received:', tableData); // Debug log\n\n//   return (\n//     <TableContainer>\n//       <Table>\n//         <TableHead>\n//           <TableRow>\n//             {columns.map((column) => (\n//               <TableCell key={column.id}>{column.label}</TableCell>\n//             ))}\n//           </TableRow>\n//         </TableHead>\n//         <TableBody>\n//           {tableData.length === 0 ? (\n//             <TableRow>\n//               <TableCell colSpan={columns.length} align=\"center\">\n//                 No data available\n//               </TableCell>\n//             </TableRow>\n//           ) : (\n//             tableData.map((row, index) => (\n//               <TableRow key={row.ID || index}>\n//                 {columns.map((column) => (\n//                   <TableCell key={`${row.ID || index}-${column.id}`}>\n//                     {column.render ? column.render(row[column.id], row) : row[column.id]}\n//                   </TableCell>\n//                 ))}\n//               </TableRow>\n//             ))\n//           )}\n//         </TableBody>\n//       </Table>\n//     </TableContainer>\n//   );\n// };\n\n// export default DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","CircularProgress","Box","jsxDEV","_jsxDEV","DataTable","columns","data","loading","_data$leads","sx","display","justifyContent","p","children","fileName","_jsxFileName","lineNumber","columnNumber","tableData","leads","lead","Array","isArray","console","log","map","column","label","id","length","colSpan","align","row","index","render","ID","_c","$RefreshReg$"],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/components/common/DataTable.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  CircularProgress,\r\n  Box,\r\n} from '@mui/material';\r\n\r\nconst DataTable = ({ columns, data, loading }) => {\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Handle both nested and direct data structures\r\n  const tableData = data?.leads?.lead || (Array.isArray(data) ? data : []);\r\n  console.log('DataTable received:', tableData); // Debug log\r\n\r\n  return (\r\n    <TableContainer>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((column) => (\r\n              <TableCell key={column.id}>{column.label}</TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {tableData.length === 0 ? (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} align=\"center\">\r\n                No data available\r\n              </TableCell>\r\n            </TableRow>\r\n          ) : (\r\n            tableData.map((row, index) => (\r\n              <TableRow key={row.id || row.ID || index}>\r\n                {columns.map((column) => (\r\n                  <TableCell key={`${row.id || row.ID || index}-${column.id}`}>\r\n                    {column.render ? column.render(row) : row[column.id]}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n// import React from 'react';\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableContainer,\r\n//   TableHead,\r\n//   TableRow,\r\n//   CircularProgress,\r\n//   Box,\r\n// } from '@mui/material';\r\n\r\n// const DataTable = ({ columns, data, loading }) => {\r\n//   if (loading) {\r\n//     return (\r\n//       <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n//         <CircularProgress />\r\n//       </Box>\r\n//     );\r\n//   }\r\n\r\n//   const tableData = Array.isArray(data) ? data : [];\r\n//   console.log('DataTable received:', tableData); // Debug log\r\n\r\n//   return (\r\n//     <TableContainer>\r\n//       <Table>\r\n//         <TableHead>\r\n//           <TableRow>\r\n//             {columns.map((column) => (\r\n//               <TableCell key={column.id}>{column.label}</TableCell>\r\n//             ))}\r\n//           </TableRow>\r\n//         </TableHead>\r\n//         <TableBody>\r\n//           {tableData.length === 0 ? (\r\n//             <TableRow>\r\n//               <TableCell colSpan={columns.length} align=\"center\">\r\n//                 No data available\r\n//               </TableCell>\r\n//             </TableRow>\r\n//           ) : (\r\n//             tableData.map((row, index) => (\r\n//               <TableRow key={row.ID || index}>\r\n//                 {columns.map((column) => (\r\n//                   <TableCell key={`${row.ID || index}-${column.id}`}>\r\n//                     {column.render ? column.render(row[column.id], row) : row[column.id]}\r\n//                   </TableCell>\r\n//                 ))}\r\n//               </TableRow>\r\n//             ))\r\n//           )}\r\n//         </TableBody>\r\n//       </Table>\r\n//     </TableContainer>\r\n//   );\r\n// };\r\n\r\n// export default DataTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}