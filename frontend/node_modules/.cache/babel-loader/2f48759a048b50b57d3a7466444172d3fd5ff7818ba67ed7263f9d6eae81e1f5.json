{"ast":null,"code":"var _jsxFileName = \"/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/pages/customers/Customers.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// ... existing imports ...\nimport CustomerForm from '../../components/customers/CustomerForm';\nimport Notification from '../../components/common/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Customers = () => {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [openForm, setOpenForm] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  const showNotification = (message, severity = 'success') => {\n    setNotification({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseNotification = () => {\n    setNotification(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  const handleAddCustomer = async formData => {\n    try {\n      const response = await customerService.createCustomer(formData);\n      setCustomers([...customers, response.data]);\n      showNotification('Customer added successfully');\n      setOpenForm(false);\n    } catch (error) {\n      showNotification(error.message || 'Error adding customer', 'error');\n    }\n  };\n  const handleEditCustomer = async formData => {\n    try {\n      const response = await customerService.updateCustomer(selectedCustomer.id, formData);\n      setCustomers(customers.map(customer => customer.id === selectedCustomer.id ? response.data : customer));\n      showNotification('Customer updated successfully');\n      setSelectedCustomer(null);\n      setOpenForm(false);\n    } catch (error) {\n      showNotification(error.message || 'Error updating customer', 'error');\n    }\n  };\n  const handleDelete = async customerId => {\n    if (window.confirm('Are you sure you want to delete this customer?')) {\n      try {\n        await customerService.deleteCustomer(customerId);\n        setCustomers(customers.filter(customer => customer.id !== customerId));\n        showNotification('Customer deleted successfully');\n      } catch (error) {\n        showNotification(error.message || 'Error deleting customer', 'error');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(CustomerForm, {\n      open: openForm,\n      onClose: () => {\n        setOpenForm(false);\n        setSelectedCustomer(null);\n      },\n      onSubmit: selectedCustomer ? handleEditCustomer : handleAddCustomer,\n      initialData: selectedCustomer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      open: notification.open,\n      message: notification.message,\n      severity: notification.severity,\n      onClose: handleCloseNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Customers, \"RK2b53m18o3ECjdK1BwiSf3h/tE=\");\n_c = Customers;\nexport default Customers;\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Paper,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Typography,\n//   IconButton,\n//   Tooltip,\n//   Button,\n//   Chip\n// } from '@mui/material';\n// import {\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n//   Add as AddIcon,\n//   Phone as PhoneIcon,\n//   Email as EmailIcon\n// } from '@mui/icons-material';\n// import { customerService } from '../../services/api';\n\n// const Customers = () => {\n//   const [customers, setCustomers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchCustomers();\n//   }, []);\n\n//   const fetchCustomers = async () => {\n//     try {\n//       const response = await customerService.getAllCustomers();\n//       setCustomers(response.data);\n//     } catch (error) {\n//       console.error('Error fetching customers:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleEdit = (customerId) => {\n//     console.log('Edit customer:', customerId);\n//   };\n\n//   const handleDelete = async (customerId) => {\n//     if (window.confirm('Are you sure you want to delete this customer?')) {\n//       try {\n//         await customerService.deleteCustomer(customerId);\n//         fetchCustomers();\n//       } catch (error) {\n//         console.error('Error deleting customer:', error);\n//       }\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     const colors = {\n//       active: 'success',\n//       inactive: 'error',\n//       pending: 'warning'\n//     };\n//     return colors[status.toLowerCase()] || 'default';\n//   };\n\n//   return (\n//     <Box sx={{ p: 3 }}>\n//       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n//         <Typography variant=\"h4\">Customer Management</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => console.log('Add new customer')}\n//         >\n//           Add Customer\n//         </Button>\n//       </Box>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Contact</TableCell>\n//               <TableCell>Company</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell>Value</TableCell>\n//               <TableCell align=\"right\">Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {customers.map((customer) => (\n//               <TableRow key={customer.id}>\n//                 <TableCell>{customer.name}</TableCell>\n//                 <TableCell>\n//                   <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n//                     <Tooltip title={customer.phone}>\n//                       <IconButton size=\"small\">\n//                         <PhoneIcon fontSize=\"small\" />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Tooltip title={customer.email}>\n//                       <IconButton size=\"small\">\n//                         <EmailIcon fontSize=\"small\" />\n//                       </IconButton>\n//                     </Tooltip>\n//                   </Box>\n//                 </TableCell>\n//                 <TableCell>{customer.company}</TableCell>\n//                 <TableCell>\n//                   <Chip \n//                     label={customer.status}\n//                     color={getStatusColor(customer.status)}\n//                     size=\"small\"\n//                   />\n//                 </TableCell>\n//                 <TableCell>${customer.value?.toLocaleString() || 0}</TableCell>\n//                 <TableCell align=\"right\">\n//                   <Tooltip title=\"Edit\">\n//                     <IconButton onClick={() => handleEdit(customer.id)}>\n//                       <EditIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                   <Tooltip title=\"Delete\">\n//                     <IconButton onClick={() => handleDelete(customer.id)}>\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// export default Customers;\nvar _c;\n$RefreshReg$(_c, \"Customers\");","map":{"version":3,"names":["React","useState","useEffect","CustomerForm","Notification","jsxDEV","_jsxDEV","Customers","_s","customers","setCustomers","loading","setLoading","openForm","setOpenForm","selectedCustomer","setSelectedCustomer","notification","setNotification","open","message","severity","showNotification","handleCloseNotification","prev","handleAddCustomer","formData","response","customerService","createCustomer","data","error","handleEditCustomer","updateCustomer","id","map","customer","handleDelete","customerId","window","confirm","deleteCustomer","filter","Box","sx","p","children","onClose","onSubmit","initialData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/pages/customers/Customers.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n// ... existing imports ...\nimport CustomerForm from '../../components/customers/CustomerForm';\nimport Notification from '../../components/common/Notification';\n\nconst Customers = () => {\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [openForm, setOpenForm] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n\n  const showNotification = (message, severity = 'success') => {\n    setNotification({\n      open: true,\n      message,\n      severity\n    });\n  };\n\n  const handleCloseNotification = () => {\n    setNotification(prev => ({ ...prev, open: false }));\n  };\n\n  const handleAddCustomer = async (formData) => {\n    try {\n      const response = await customerService.createCustomer(formData);\n      setCustomers([...customers, response.data]);\n      showNotification('Customer added successfully');\n      setOpenForm(false);\n    } catch (error) {\n      showNotification(error.message || 'Error adding customer', 'error');\n    }\n  };\n\n  const handleEditCustomer = async (formData) => {\n    try {\n      const response = await customerService.updateCustomer(selectedCustomer.id, formData);\n      setCustomers(customers.map(customer => \n        customer.id === selectedCustomer.id ? response.data : customer\n      ));\n      showNotification('Customer updated successfully');\n      setSelectedCustomer(null);\n      setOpenForm(false);\n    } catch (error) {\n      showNotification(error.message || 'Error updating customer', 'error');\n    }\n  };\n\n  const handleDelete = async (customerId) => {\n    if (window.confirm('Are you sure you want to delete this customer?')) {\n      try {\n        await customerService.deleteCustomer(customerId);\n        setCustomers(customers.filter(customer => customer.id !== customerId));\n        showNotification('Customer deleted successfully');\n      } catch (error) {\n        showNotification(error.message || 'Error deleting customer', 'error');\n      }\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* ... existing table JSX ... */}\n      \n      <CustomerForm\n        open={openForm}\n        onClose={() => {\n          setOpenForm(false);\n          setSelectedCustomer(null);\n        }}\n        onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n        initialData={selectedCustomer}\n      />\n\n      <Notification\n        open={notification.open}\n        message={notification.message}\n        severity={notification.severity}\n        onClose={handleCloseNotification}\n      />\n    </Box>\n  );\n};\n\nexport default Customers;\n\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Paper,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Typography,\n//   IconButton,\n//   Tooltip,\n//   Button,\n//   Chip\n// } from '@mui/material';\n// import {\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n//   Add as AddIcon,\n//   Phone as PhoneIcon,\n//   Email as EmailIcon\n// } from '@mui/icons-material';\n// import { customerService } from '../../services/api';\n\n// const Customers = () => {\n//   const [customers, setCustomers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchCustomers();\n//   }, []);\n\n//   const fetchCustomers = async () => {\n//     try {\n//       const response = await customerService.getAllCustomers();\n//       setCustomers(response.data);\n//     } catch (error) {\n//       console.error('Error fetching customers:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleEdit = (customerId) => {\n//     console.log('Edit customer:', customerId);\n//   };\n\n//   const handleDelete = async (customerId) => {\n//     if (window.confirm('Are you sure you want to delete this customer?')) {\n//       try {\n//         await customerService.deleteCustomer(customerId);\n//         fetchCustomers();\n//       } catch (error) {\n//         console.error('Error deleting customer:', error);\n//       }\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     const colors = {\n//       active: 'success',\n//       inactive: 'error',\n//       pending: 'warning'\n//     };\n//     return colors[status.toLowerCase()] || 'default';\n//   };\n\n//   return (\n//     <Box sx={{ p: 3 }}>\n//       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n//         <Typography variant=\"h4\">Customer Management</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => console.log('Add new customer')}\n//         >\n//           Add Customer\n//         </Button>\n//       </Box>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Contact</TableCell>\n//               <TableCell>Company</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell>Value</TableCell>\n//               <TableCell align=\"right\">Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {customers.map((customer) => (\n//               <TableRow key={customer.id}>\n//                 <TableCell>{customer.name}</TableCell>\n//                 <TableCell>\n//                   <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n//                     <Tooltip title={customer.phone}>\n//                       <IconButton size=\"small\">\n//                         <PhoneIcon fontSize=\"small\" />\n//                       </IconButton>\n//                     </Tooltip>\n//                     <Tooltip title={customer.email}>\n//                       <IconButton size=\"small\">\n//                         <EmailIcon fontSize=\"small\" />\n//                       </IconButton>\n//                     </Tooltip>\n//                   </Box>\n//                 </TableCell>\n//                 <TableCell>{customer.company}</TableCell>\n//                 <TableCell>\n//                   <Chip \n//                     label={customer.status}\n//                     color={getStatusColor(customer.status)}\n//                     size=\"small\"\n//                   />\n//                 </TableCell>\n//                 <TableCell>${customer.value?.toLocaleString() || 0}</TableCell>\n//                 <TableCell align=\"right\">\n//                   <Tooltip title=\"Edit\">\n//                     <IconButton onClick={() => handleEdit(customer.id)}>\n//                       <EditIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                   <Tooltip title=\"Delete\">\n//                     <IconButton onClick={() => handleDelete(customer.id)}>\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// export default Customers;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}