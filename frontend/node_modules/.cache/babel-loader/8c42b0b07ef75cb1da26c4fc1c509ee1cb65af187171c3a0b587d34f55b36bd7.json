{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Button,\n//   Paper,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Typography,\n//   IconButton,\n//   Tooltip,\n// } from '@mui/material';\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n// } from '@mui/icons-material';\n// import CustomerForm from './CustomerForm';\n// import { customerService } from '../../services/customerService';\n\n// const Customers = () => {\n//   const [customers, setCustomers] = useState([]);\n//   const [openForm, setOpenForm] = useState(false);\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchCustomers();\n//   }, []);\n\n//   const fetchCustomers = async () => {\n//     try {\n//       const data = await customerService.getAll();\n//       setCustomers(data);\n//     } catch (error) {\n//       console.error('Error fetching customers:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleAddCustomer = async (customerData) => {\n//     try {\n//       const newCustomer = await customerService.create(customerData);\n//       setCustomers([...customers, newCustomer]);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error adding customer:', error);\n//     }\n//   };\n\n//   const handleEditCustomer = async (customerData) => {\n//     try {\n//       const updatedCustomer = await customerService.update(selectedCustomer.id, customerData);\n//       setCustomers(customers.map(customer => \n//         customer.id === selectedCustomer.id ? updatedCustomer : customer\n//       ));\n//       setSelectedCustomer(null);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error updating customer:', error);\n//     }\n//   };\n\n//   const handleDeleteCustomer = async (id) => {\n//     if (window.confirm('Are you sure you want to delete this customer?')) {\n//       try {\n//         await customerService.delete(id);\n//         setCustomers(customers.filter(customer => customer.id !== id));\n//       } catch (error) {\n//         console.error('Error deleting customer:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <Box sx={{ p: 3 }}>\n//       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n//         <Typography variant=\"h4\">Customers</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => setOpenForm(true)}\n//         >\n//           Add Customer\n//         </Button>\n//       </Box>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Email</TableCell>\n//               <TableCell>Phone</TableCell>\n//               <TableCell>Company</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell align=\"right\">Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {customers.map((customer) => (\n//               <TableRow key={customer.id}>\n//                 <TableCell>{customer.name}</TableCell>\n//                 <TableCell>{customer.email}</TableCell>\n//                 <TableCell>{customer.phone}</TableCell>\n//                 <TableCell>{customer.company}</TableCell>\n//                 <TableCell>{customer.status}</TableCell>\n//                 <TableCell align=\"right\">\n//                   <Tooltip title=\"Edit\">\n//                     <IconButton\n//                       onClick={() => {\n//                         setSelectedCustomer(customer);\n//                         setOpenForm(true);\n//                       }}\n//                     >\n//                       <EditIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                   <Tooltip title=\"Delete\">\n//                     <IconButton\n//                       onClick={() => handleDeleteCustomer(customer.id)}\n//                       color=\"error\"\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <CustomerForm\n//         open={openForm}\n//         onClose={() => {\n//           setOpenForm(false);\n//           setSelectedCustomer(null);\n//         }}\n//         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n//         customer={selectedCustomer}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default Customers;\n// // import React, { useState, useEffect } from 'react';// import {\n// // //   Box,\n// // //   Paper,\n// // //   Table,\n// // //   TableBody,\n// // //   TableCell,\n// // //   TableContainer,\n// // //   TableHead,\n// // //   TableRow,\n// // //   Typography,\n// // //   IconButton,\n// // //   Tooltip,\n// // //   Button,\n// // //   Chip\n// // // } from '@mui/material';\n// // // import {\n// // //   Edit as EditIcon,\n// // //   Delete as DeleteIcon,\n// // //   Add as AddIcon,\n// // //   Phone as PhoneIcon,\n// // //   Email as EmailIcon\n// // // } from '@mui/icons-material';\n// // import CustomerForm from '../../components/customers/CustomerForm';\n// // import Notification from '../../components/common/Notification';\n\n// // const Customers = () => {\n// //   const [customers, setCustomers] = useState([ {\n// //     id: 1,\n// //     name: 'John Doe',\n// //     email: 'john@example.com',\n// //     phone: '123-456-7890',\n// //     company: 'Tech Corp',\n// //     status: 'active',\n// //     value: 50000\n// //   },\n// //   {\n// //     id: 2,\n// //     name: 'Jane Smith',\n// //     email: 'jane@example.com',\n// //     phone: '098-765-4321',\n// //     company: 'Design Co',\n// //     status: 'inactive',\n// //     value: 25000\n// //   }]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [openForm, setOpenForm] = useState(false);\n// //   const [selectedCustomer, setSelectedCustomer] = useState(null);\n// //   const [notification, setNotification] = useState({\n// //     open: false,\n// //     message: '',\n// //     severity: 'success'\n// //   });\n\n// //   useEffect(() => {\n// //     fetchCustomers();\n// //   }, []);\n\n// //   const fetchCustomers = async () => {\n// //     try {\n// //       setLoading(true);\n// //       const response = await customerService.getCustomers();\n// //       setCustomers(response);\n// //     } catch (error) {\n// //       showNotification('Error fetching customers', 'error');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const showNotification = (message, severity = 'success') => {\n// //     setNotification({\n// //       open: true,\n// //       message,\n// //       severity\n// //     });\n// //   };\n\n// //   const handleCloseNotification = () => {\n// //     setNotification(prev => ({ ...prev, open: false }));\n// //   };\n\n// //   const handleAddCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.createCustomer(formData);\n// //       setCustomers([...customers, response]);\n// //       setOpenForm(false);\n// //       showNotification('Customer added successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error adding customer', 'error');\n// //     }\n// //   };\n\n// //   const handleEditCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.updateCustomer(selectedCustomer.id, formData);\n// //       setCustomers(customers.map(customer => \n// //         customer.id === selectedCustomer.id ? response : customer\n// //       ));\n// //       setSelectedCustomer(null);\n// //       setOpenForm(false);\n// //       showNotification('Customer updated successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error updating customer', 'error');\n// //     }\n// //   };\n\n// //   const handleDelete = async (customerId) => {\n// //     if (window.confirm('Are you sure you want to delete this customer?')) {\n// //       try {\n// //         await customerService.deleteCustomer(customerId);\n// //         setCustomers(customers.filter(customer => customer.id !== customerId));\n// //         showNotification('Customer deleted successfully');\n// //       } catch (error) {\n// //         showNotification(error.message || 'Error deleting customer', 'error');\n// //       }\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Box sx={{ p: 3 }}>\n// //       {/* ... existing JSX code ... */}\n\n// //       <CustomerForm\n// //         open={openForm}\n// //         onClose={() => {\n// //           setOpenForm(false);\n// //           setSelectedCustomer(null);\n// //         }}\n// //         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n// //         initialData={selectedCustomer}\n// //       />\n\n// //       <Notification\n// //         open={notification.open}\n// //         message={notification.message}\n// //         severity={notification.severity}\n// //         onClose={handleCloseNotification}\n// //       />\n// //     </Box>\n// //   );\n// // };\n\n// // export default Customers;","map":{"version":3,"names":[],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/pages/customers/Customers.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import {\n//   Box,\n//   Button,\n//   Paper,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Typography,\n//   IconButton,\n//   Tooltip,\n// } from '@mui/material';\n// import {\n//   Add as AddIcon,\n//   Edit as EditIcon,\n//   Delete as DeleteIcon,\n// } from '@mui/icons-material';\n// import CustomerForm from './CustomerForm';\n// import { customerService } from '../../services/customerService';\n\n// const Customers = () => {\n//   const [customers, setCustomers] = useState([]);\n//   const [openForm, setOpenForm] = useState(false);\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchCustomers();\n//   }, []);\n\n//   const fetchCustomers = async () => {\n//     try {\n//       const data = await customerService.getAll();\n//       setCustomers(data);\n//     } catch (error) {\n//       console.error('Error fetching customers:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleAddCustomer = async (customerData) => {\n//     try {\n//       const newCustomer = await customerService.create(customerData);\n//       setCustomers([...customers, newCustomer]);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error adding customer:', error);\n//     }\n//   };\n\n//   const handleEditCustomer = async (customerData) => {\n//     try {\n//       const updatedCustomer = await customerService.update(selectedCustomer.id, customerData);\n//       setCustomers(customers.map(customer => \n//         customer.id === selectedCustomer.id ? updatedCustomer : customer\n//       ));\n//       setSelectedCustomer(null);\n//       setOpenForm(false);\n//     } catch (error) {\n//       console.error('Error updating customer:', error);\n//     }\n//   };\n\n//   const handleDeleteCustomer = async (id) => {\n//     if (window.confirm('Are you sure you want to delete this customer?')) {\n//       try {\n//         await customerService.delete(id);\n//         setCustomers(customers.filter(customer => customer.id !== id));\n//       } catch (error) {\n//         console.error('Error deleting customer:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <Box sx={{ p: 3 }}>\n//       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n//         <Typography variant=\"h4\">Customers</Typography>\n//         <Button\n//           variant=\"contained\"\n//           startIcon={<AddIcon />}\n//           onClick={() => setOpenForm(true)}\n//         >\n//           Add Customer\n//         </Button>\n//       </Box>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Email</TableCell>\n//               <TableCell>Phone</TableCell>\n//               <TableCell>Company</TableCell>\n//               <TableCell>Status</TableCell>\n//               <TableCell align=\"right\">Actions</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {customers.map((customer) => (\n//               <TableRow key={customer.id}>\n//                 <TableCell>{customer.name}</TableCell>\n//                 <TableCell>{customer.email}</TableCell>\n//                 <TableCell>{customer.phone}</TableCell>\n//                 <TableCell>{customer.company}</TableCell>\n//                 <TableCell>{customer.status}</TableCell>\n//                 <TableCell align=\"right\">\n//                   <Tooltip title=\"Edit\">\n//                     <IconButton\n//                       onClick={() => {\n//                         setSelectedCustomer(customer);\n//                         setOpenForm(true);\n//                       }}\n//                     >\n//                       <EditIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                   <Tooltip title=\"Delete\">\n//                     <IconButton\n//                       onClick={() => handleDeleteCustomer(customer.id)}\n//                       color=\"error\"\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <CustomerForm\n//         open={openForm}\n//         onClose={() => {\n//           setOpenForm(false);\n//           setSelectedCustomer(null);\n//         }}\n//         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n//         customer={selectedCustomer}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default Customers;\n// // import React, { useState, useEffect } from 'react';// import {\n// // //   Box,\n// // //   Paper,\n// // //   Table,\n// // //   TableBody,\n// // //   TableCell,\n// // //   TableContainer,\n// // //   TableHead,\n// // //   TableRow,\n// // //   Typography,\n// // //   IconButton,\n// // //   Tooltip,\n// // //   Button,\n// // //   Chip\n// // // } from '@mui/material';\n// // // import {\n// // //   Edit as EditIcon,\n// // //   Delete as DeleteIcon,\n// // //   Add as AddIcon,\n// // //   Phone as PhoneIcon,\n// // //   Email as EmailIcon\n// // // } from '@mui/icons-material';\n// // import CustomerForm from '../../components/customers/CustomerForm';\n// // import Notification from '../../components/common/Notification';\n\n// // const Customers = () => {\n// //   const [customers, setCustomers] = useState([ {\n// //     id: 1,\n// //     name: 'John Doe',\n// //     email: 'john@example.com',\n// //     phone: '123-456-7890',\n// //     company: 'Tech Corp',\n// //     status: 'active',\n// //     value: 50000\n// //   },\n// //   {\n// //     id: 2,\n// //     name: 'Jane Smith',\n// //     email: 'jane@example.com',\n// //     phone: '098-765-4321',\n// //     company: 'Design Co',\n// //     status: 'inactive',\n// //     value: 25000\n// //   }]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [openForm, setOpenForm] = useState(false);\n// //   const [selectedCustomer, setSelectedCustomer] = useState(null);\n// //   const [notification, setNotification] = useState({\n// //     open: false,\n// //     message: '',\n// //     severity: 'success'\n// //   });\n\n// //   useEffect(() => {\n// //     fetchCustomers();\n// //   }, []);\n\n// //   const fetchCustomers = async () => {\n// //     try {\n// //       setLoading(true);\n// //       const response = await customerService.getCustomers();\n// //       setCustomers(response);\n// //     } catch (error) {\n// //       showNotification('Error fetching customers', 'error');\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const showNotification = (message, severity = 'success') => {\n// //     setNotification({\n// //       open: true,\n// //       message,\n// //       severity\n// //     });\n// //   };\n\n// //   const handleCloseNotification = () => {\n// //     setNotification(prev => ({ ...prev, open: false }));\n// //   };\n\n// //   const handleAddCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.createCustomer(formData);\n// //       setCustomers([...customers, response]);\n// //       setOpenForm(false);\n// //       showNotification('Customer added successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error adding customer', 'error');\n// //     }\n// //   };\n\n// //   const handleEditCustomer = async (formData) => {\n// //     try {\n// //       const response = await customerService.updateCustomer(selectedCustomer.id, formData);\n// //       setCustomers(customers.map(customer => \n// //         customer.id === selectedCustomer.id ? response : customer\n// //       ));\n// //       setSelectedCustomer(null);\n// //       setOpenForm(false);\n// //       showNotification('Customer updated successfully');\n// //     } catch (error) {\n// //       showNotification(error.message || 'Error updating customer', 'error');\n// //     }\n// //   };\n\n// //   const handleDelete = async (customerId) => {\n// //     if (window.confirm('Are you sure you want to delete this customer?')) {\n// //       try {\n// //         await customerService.deleteCustomer(customerId);\n// //         setCustomers(customers.filter(customer => customer.id !== customerId));\n// //         showNotification('Customer deleted successfully');\n// //       } catch (error) {\n// //         showNotification(error.message || 'Error deleting customer', 'error');\n// //       }\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   return (\n// //     <Box sx={{ p: 3 }}>\n// //       {/* ... existing JSX code ... */}\n      \n// //       <CustomerForm\n// //         open={openForm}\n// //         onClose={() => {\n// //           setOpenForm(false);\n// //           setSelectedCustomer(null);\n// //         }}\n// //         onSubmit={selectedCustomer ? handleEditCustomer : handleAddCustomer}\n// //         initialData={selectedCustomer}\n// //       />\n\n// //       <Notification\n// //         open={notification.open}\n// //         message={notification.message}\n// //         severity={notification.severity}\n// //         onClose={handleCloseNotification}\n// //       />\n// //     </Box>\n// //   );\n// // };\n\n// // export default Customers;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}