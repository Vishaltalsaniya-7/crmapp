{"ast":null,"code":"var _jsxFileName = \"/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/pages/customers/Customers.js\",\n  _s = $RefreshSig$();\n// ... existing imports ...\nimport React, { useState, useEffect } from 'react';\nimport { Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, IconButton, Tooltip, Button, Chip } from '@mui/material';\n// ... rest of the imports and code ...\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Customers = () => {\n  _s();\n  const [customers, setCustomers] = useState([]); // Initialize as empty array\n  const [loading, setLoading] = useState(true);\n  const [openForm, setOpenForm] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  useEffect(() => {\n    fetchCustomers();\n  }, []);\n  const fetchCustomers = async () => {\n    try {\n      // Temporary mock data until backend is ready\n      const mockCustomers = [{\n        id: 1,\n        name: 'John Doe',\n        email: 'john@example.com',\n        phone: '123-456-7890',\n        company: 'Tech Corp',\n        status: 'active',\n        value: 50000\n      }, {\n        id: 2,\n        name: 'Jane Smith',\n        email: 'jane@example.com',\n        phone: '098-765-4321',\n        company: 'Design Co',\n        status: 'inactive',\n        value: 25000\n      }];\n      setCustomers(mockCustomers);\n      // Once backend is ready, uncomment this:\n      // const response = await customerService.getAllCustomers();\n      // setCustomers(response.data);\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ... rest of the component code ...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: Array.isArray(customers) && customers.length > 0 ? customers.map(customer => /*#__PURE__*/_jsxDEV(TableRow, {}, customer.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 6,\n              align: \"center\",\n              children: loading ? 'Loading...' : 'No customers found'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Customers, \"7DvrwdeG7k8cR6pMspMVt17vcvc=\");\n_c = Customers;\nexport default Customers;\nvar _c;\n$RefreshReg$(_c, \"Customers\");","map":{"version":3,"names":["React","useState","useEffect","Box","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","IconButton","Tooltip","Button","Chip","jsxDEV","_jsxDEV","Customers","_s","customers","setCustomers","loading","setLoading","openForm","setOpenForm","selectedCustomer","setSelectedCustomer","fetchCustomers","mockCustomers","id","name","email","phone","company","status","value","error","console","sx","p","children","component","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","length","map","customer","colSpan","align","_c","$RefreshReg$"],"sources":["/home/vishal/Vishal/Projects/src/github.com/crmapp/frontend/src/pages/customers/Customers.js"],"sourcesContent":["// ... existing imports ...\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  IconButton,\n  Tooltip,\n  Button,\n  Chip\n} from '@mui/material';\n// ... rest of the imports and code ...\nconst Customers = () => {\n  const [customers, setCustomers] = useState([]);  // Initialize as empty array\n  const [loading, setLoading] = useState(true);\n  const [openForm, setOpenForm] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n\n  useEffect(() => {\n    fetchCustomers();\n  }, []);\n\n  const fetchCustomers = async () => {\n    try {\n      // Temporary mock data until backend is ready\n      const mockCustomers = [\n        {\n          id: 1,\n          name: 'John Doe',\n          email: 'john@example.com',\n          phone: '123-456-7890',\n          company: 'Tech Corp',\n          status: 'active',\n          value: 50000\n        },\n        {\n          id: 2,\n          name: 'Jane Smith',\n          email: 'jane@example.com',\n          phone: '098-765-4321',\n          company: 'Design Co',\n          status: 'inactive',\n          value: 25000\n        }\n      ];\n      \n      setCustomers(mockCustomers);\n      // Once backend is ready, uncomment this:\n      // const response = await customerService.getAllCustomers();\n      // setCustomers(response.data);\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ... rest of the component code ...\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* ... existing header ... */}\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            {/* ... existing table head ... */}\n          </TableHead>\n          <TableBody>\n            {Array.isArray(customers) && customers.length > 0 ? (\n              customers.map((customer) => (\n                <TableRow key={customer.id}>\n                  {/* ... existing row content ... */}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={6} align=\"center\">\n                  {loading ? 'Loading...' : 'No customers found'}\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* ... rest of the component ... */}\n    </Box>\n  );\n};\n\nexport default Customers;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}